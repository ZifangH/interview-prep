104. Maximum Depth of Binary Tree

class Solution(object):
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        # recursion
        if root is None:
            return 0
        left = self.maxDepth(root.left)
        print(left)
        right = self.maxDepth(root.right)
        print(right)
        
        return max(left, right) + 1
    
Your input
[3,9,20,null,null,15,7]
Your stdout
0
0
1
0
0
1
0
0
1
2
Your answer
3


283. Move Zeroes
class Solution(object):
    def moveZeroes(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        zero = 0  # records the position of "0"
        for i in xrange(len(nums)):
            if nums[i] != 0:
                nums[i], nums[zero] = nums[zero], nums[i]
                zero += 1
                
  
  
  
171. Excel Sheet Column Number
class Solution(object):
    def titleToNumber(self, s):
        """
        :type s: str
        :rtype: int
        """
        return sum([(ord(c.upper())-64)*26**position for position,c in enumerate(s[::-1])])
    # enumerate(sequence, start=0)
    # Return an enumerate object. sequence must be a sequence, an iterator, or some other 
    # object which supports iteration. 
    
    
    or 
    
    return reduce(lambda x, y : x * 26 + y, [ord(c) - 64 for c in s])
    
    # reduce(function, iterable[, initializer])
    # Apply function of two arguments cumulatively to the items of iterable, from left to right, 
    # so as to reduce the iterable to a single value. 
    # For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5).
